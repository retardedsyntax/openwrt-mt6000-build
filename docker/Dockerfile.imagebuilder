# syntax=docker/dockerfile-upstream:master
#################################################

## https://www.docker.com/blog/introduction-to-heredocs-in-dockerfiles/
## ARGS are env vars that are *only available* during the Docker build.
## They can be modified at Docker build time via '--build-arg VAR="something"'.
ARG REGISTRY=localhost
ARG BASE_IMAGE=openwrt/base

FROM ${REGISTRY}/${BASE_IMAGE} AS base

## Set Bash as the default shell.
SHELL ["/bin/bash", "-o", "pipefail", "-c"]

## Step 1.
## Install required packages and tools.
ARG DEBIAN_FRONTEND=noninteractive
RUN <<EOF
    set -ex
    apt-get update -y
    apt-get install -y \
      asciidoc \
      bash \
      binutils \
      bison \
      bzip2 \
      ccache \
      flex \
      g++ \
      g++-multilib \
      gawk \
      gcc \
      gcc-multilib \
      genisoimage \
      gettext \
      gzip \
      help2man \
      intltool \
      libc-dev \
      libc6-dev \
      libdw-dev \
      libelf-dev \
      libncurses5-dev \
      libncursesw5-dev \
      libssl-dev \
      make \
      patch \
      perl-modules \
      pv \
      pwgen \
      python-is-python3 \
      python3 \
      python3-cryptography \
      python3-dev \
      python3-pip \
      python3-pyelftools \
      python3-setuptools \
      python3-venv \
      qemu-utils \
      signify-openbsd \
      subversion \
      swig \
      tar \
      unzip \
      xsltproc \
      xxd \
      zlib1g-dev \
      zstd
EOF

## Step 2.
## Cleanup APT.
RUN <<EOF
    set -ex
    apt-get clean -y
    apt-get autoclean -y
    apt-get autoremove -y
    rm -rf /var/lib/apt/lists/*
EOF

ENV GCC_COLORS='error=01;31:warning=01;35:note=01;36:caret=01;32:locus=01:quote=01'


FROM base as imagebuilder

## Set Bash as the default shell.
SHELL ["/bin/bash", "-o", "pipefail", "-c"]

ARG BUILDER_URL
ARG BUILDER_WORKDIR_ROOT=/builder
ARG BUILDER_WORKDIR=${BUILDER_WORKDIR_ROOT}/imagebuilder
ARG BUILDER_USER=buildbot
ARG BUILDER_UID=1000
ARG BUILDER_GID=1000

## Step 3.
## Create group and user.
RUN <<EOF
    set -ex
    groupadd --gid ${BUILDER_GID} ${BUILDER_USER}
    useradd \
      --uid ${BUILDER_UID} \
      --gid ${BUILDER_GID} \
      --create-home \
      --no-user-group \
      --shell "/bin/bash" ${BUILDER_USER}
EOF

## Step 4.
## Create working directories.
RUN <<EOF
    set -ex
    mkdir -pv ${BUILDER_WORKDIR}
    chown -vR ${BUILDER_UID}:${BUILDER_GID} ${BUILDER_WORKDIR}
EOF

## Step 5.
## Install the image builder. Use tmpfile 
## so that tar's compression autodetection works.
RUN <<EOF
    set -ex
    curl -fL "${BUILDER_URL}" -o /tmp/imagebuilder
    pushd "${BUILDER_WORKDIR}"
    tar -xvf /tmp/imagebuilder --strip-components=1
    popd
    rm -f /tmp/imagebuilder
EOF
#RUN curl -fL "${BUILDER_URL}" -o /tmp/imagebuilder \
#    && tar -xvf /tmp/imagebuilder --strip-components=1 -C "${BUILDER_WORKDIR}/" \
#    && rm -f /tmp/imagebuilder

WORKDIR ${BUILDER_WORKDIR}
USER ${BUILDER_USER}
CMD ["/bin/bash"]


