# syntax=docker/dockerfile-upstream:master
#################################################

## https://www.docker.com/blog/introduction-to-heredocs-in-dockerfiles/
## ARGS are env vars that are *only available* during the Docker build.
## They can be modified at Docker build time via '--build-arg VAR="something"'.
ARG REGISTRY=docker.io/library
ARG BASE_IMAGE=ubuntu:22.04

FROM ${REGISTRY}/${BASE_IMAGE} AS base

ENV TZ='Europe/Helsinki' \
    LC_ALL='C.UTF-8' \
    LANG='en_US.UTF-8' \
    LANGUAGE='en_US:en:C'

## Step 1. Prepare base image.
ARG DEBIAN_FRONTEND=noninteractive

## Install basic APT stuff and upgrade
RUN apt-get -y update && \
    apt-get -y upgrade && \
    apt-get install -y --no-install-recommends \
      apt-transport-https \
      ca-certificates \
      software-properties-common \
      debconf-utils

## Autoconfigure packages during install with 'debconf-set-selections'
RUN debconf-set-selections <<EOF
keyboard-configuration	keyboard-configuration/layout	select	Finnish
keyboard-configuration	keyboard-configuration/variant	select	Finnish
keyboard-configuration	keyboard-configuration/layoutcode	string	fi
console-setup	console-setup/charmap47	select	UTF-8
console-setup	console-setup/codeset47	select	# Latin1 and Latin5 - western Europe and Turkic languages
console-setup	console-setup/codesetcode	string	Lat15
console-setup	console-setup/fontface47	select	Terminus
console-setup	console-setup/fontsize	string	8x16
console-setup	console-setup/fontsize-fb47	select	8x16
console-setup	console-setup/fontsize-text47	select	8x16
tzdata	tzdata/Areas	select	Europe
tzdata	tzdata/Zones/Etc	select	UTC
tzdata	tzdata/Zones/Europe	select	Helsinki
EOF

## Install locale stuff
RUN apt-get install -y --no-install-recommends \
      locales \
      language-pack-en \
      keyboard-configuration \
      console-setup \
      tzdata
RUN localedef -i en_US -c -f UTF-8 -A /usr/share/locale/locale.alias en_US.UTF-8

## Install basic packages and cleanup
RUN apt-get install -y --no-install-recommends \
      curl \
      file \
      git \
      git-lfs \
      gnupg2 \
      jq \
      nano \
      rsync \
      wget \
    && apt-get clean autoclean -y \
    && apt-get autoremove -y \
    && rm -rf /var/lib/apt/lists/*

FROM base as builder_base

## Step 2. Prepare builder image.
ARG DEBIAN_FRONTEND=noninteractive

RUN apt-get update -y && \
    apt-get install -y --no-install-recommends \
      asciidoc \
      bash \
      binutils \
      bison \
      build-essential \
      bzip2 \
      ccache \
      flex \
      g++ \
      g++-multilib \
      gawk \
      gcc \
      gcc-multilib \
      genisoimage \
      gettext \
      gzip \
      help2man \ 
      intltool \
      libdw-dev \
      libelf-dev \
      libncurses5-dev \
      libncursesw5-dev \
      libssl-dev \
      patch \
      perl-modules \ 
      pv \
      pwgen \
      python-is-python3 \
      python3 \
      python3-cryptography \
      python3-dev \
      python3-pip \
      python3-pyelftools \
      python3-setuptools \
      python3-venv \
      qemu-utils \
      signify-openbsd \
      subversion \
      swig \
      tar \
      unzip \
      xsltproc \
      xxd \
      zlib1g-dev \
      zstd \
    && apt-get clean autoclean -y \
    && apt-get autoremove -y \
    && rm -rf /var/lib/apt/lists/*

ENV GCC_COLORS='error=01;31:warning=01;35:note=01;36:caret=01;32:locus=01:quote=01'

